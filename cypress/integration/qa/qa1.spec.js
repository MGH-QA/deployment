// likely want to do this in a support file
// so it's applied to all spec files
// cypress/support/index.js

Cypress.on('uncaught:exception', (err, runnable) => {
  // returning false here prevents Cypress from
  // failing the test
  return false
})

context('Actions', () => {
  beforeEach(() => {
    cy.visit('https://qa1.alsid.app/')
  })

  describe('Authentication', () => {
    it('Login with Alsid for AD', () => {
      cy.wait(1000)
      // Username
      cy.get('input[name="alsidEmail"]')
        .type('hello@alsid.com')
        .should('have.value', 'hello@alsid.com')
      // Password
      cy.get('input[name="alsidPassword"]')
        .type('verySecure1')
        .should('have.value', 'verySecure1')
      cy.get('.ant-btn-primary')
        .click()
      cy.wait(10000)
      // Add a Forest: FOREST1
      cy.get('[attr-name="navigationmenuentry-system"] > a')
        .click()
        .wait(1000)
      cy.get('[attr-name="WidgetListActionButtons"]')
        .contains('Add a forest')
        .click()
      cy.get('input[name="name"]')
        .type('FOREST1')
        .should('have.value', 'FOREST1')
      cy.get('input[name="login"]')
        .type('ALSID\\dcadmin')
        .should('have.value', 'ALSID\\dcadmin')
      cy.get('input[name="password"]')
        .type('rxZ4iA9X8Q5T21heupJyU3GObFdKqBfH')
        .should('have.value', 'rxZ4iA9X8Q5T21heupJyU3GObFdKqBfH')
      cy.get('[attr-name="ContainerFooter"]')
        .contains('Add')
        .click()
        .wait(5000)
      // Add a Forest: FOREST2
      cy.get('[attr-name="navigationmenuentry-system"] > a')
        .click()
        .wait(1000)
      cy.get('[attr-name="WidgetListActionButtons"]')
        .contains('Add a forest')
        .click()
      cy.get('input[name="name"]')
        .type('FOREST2')
        .should('have.value', 'FOREST2')
      cy.get('input[name="login"]')
        .type('ALSID\\dcadmin')
        .should('have.value', 'ALSID\\dcadmin')
      cy.get('input[name="password"]')
        .type('Cr2GWbQFTZiUNmngdMJLj5oK8IX017te')
        .should('have.value', 'Cr2GWbQFTZiUNmngdMJLj5oK8IX017te')
        cy.get('[attr-name="ContainerFooter"]')
        .contains('Add')
        .click()
        .wait(5000)
      // Add a Forest: FOREST3
      cy.get('[attr-name="navigationmenuentry-system"] > a')
        .click()
        .wait(2000)
      cy.get('[attr-name="WidgetListActionButtons"]')
        .contains('Add a forest')
        .click()
      cy.get('input[name="name"]')
        .type('FOREST3')
        .should('have.value', 'FOREST3')
      cy.get('input[name="login"]')
        .type('ALSID\\dcadmin')
        .should('have.value', 'ALSID\\dcadmin')
      cy.get('input[name="password"]')
        .type('wfRmsV7NUOHaFnWDLj6G1lcXrMAZb0kq')
        .should('have.value', 'wfRmsV7NUOHaFnWDLj6G1lcXrMAZb0kq')
        cy.get('[attr-name="ContainerFooter"]')
        .contains('Add')
        .click()
        .wait(5000)
      // Add a Domain: DC1
      cy.get('[attr-name="WidgetListActionButtons"]')
        .contains('Add a domain')
        .click()
        .wait(2000)
      cy.get('input[name="name"]')
        .type('DC1')
        .should('have.value', 'DC1')
      cy.get('input[name="dns"]')
        .type('alsid.corp')
        .should('have.value', 'alsid.corp')
      cy.get('.sc-gIRixj > .ant-select > .ant-select-selector > .ant-select-selection-item')
        .click()
        .wait(5000)
      cy.get('.ant-select-item-option-content')
        .contains('FOREST1')
        .click()
      cy.get('input[name="ip"]')
        .type('10.200.200.4')
        .should('have.value', '10.200.200.4')
      cy.get('[attr-name="ContainerFooter"]')
        .contains('Add')
        .click()
        .wait(5000)
      // Add a Domain: DC2
      cy.get('[attr-name="WidgetListActionButtons"]')
      .contains('Add a domain')
      .click()
      .wait(2000)
      cy.get('input[name="name"]')
        .type('DC2')
        .should('have.value', 'DC2')
      cy.get('input[name="dns"]')
        .type('rustin.corp')
        .should('have.value', 'rustin.corp')
      cy.get('.sc-gIRixj > .ant-select > .ant-select-selector > .ant-select-selection-item')
        .click()
        .wait(5000)
      cy.get('.ant-select-item-option-content')
        .contains('FOREST2')
        .click()
      cy.get('input[name="ip"]')
        .type('10.200.201.4')
        .should('have.value', '10.200.201.4')
      cy.get('[attr-name="ContainerFooter"]')
        .contains('Add')
        .click()
        .wait(5000)
      // Add a Domain: DC3
      cy.get('[attr-name="WidgetListActionButtons"]')
      .contains('Add a domain')
      .click()
      .wait(1000)
      cy.get('input[name="name"]')
        .type('DC3')
        .should('have.value', 'DC3')
      cy.get('input[name="dns"]')
        .type('martin.corp')
        .should('have.value', 'martin.corp')
      cy.get('.sc-gIRixj > .ant-select > .ant-select-selector > .ant-select-selection-item')
        .click()
        .wait(5000)
      cy.get('.ant-select-item-option-content')
        .contains('FOREST3')
        .click()
      cy.get('input[name="ip"]')
        .type('10.200.202.4')
        .should('have.value', '10.200.202.4')
      cy.get('[attr-name="ContainerFooter"]')
        .contains('Add')
        .click()
        .wait(5000)
      // SMTP server configuration
      cy.get('[href="/profile/alsid/management/system/configuration"]')
      .contains('Configuration')
      .click()
      .wait(1000)
      cy.get('input[name="smtpServerAddress"]')
        .type('smtp.mailtrap.io')
        .should('have.value', 'smtp.mailtrap.io')
      cy.get('input[name="smtpAccount"]')
        .type('b69407b31daeb0')
        .should('have.value', 'b69407b31daeb0')
      cy.get('input[name="smtpAccountPassword"]')
        .type('030d059ca42c22')
        .should('have.value', '030d059ca42c22')
      cy.get('input[name="emailSender"]')
        .type('sender@test.com')
        .should('have.value', 'sender@test.com')
      cy.get('.ant-btn')
        .click()
        .wait(5000)
      // Email configuration
      cy.get('[href="/profile/alsid/management/system/configuration/emails"]')
      .contains('Email')
      .click()
      .wait(1000)
      cy.get('.ant-btn')
        .click()
        .wait(10000)
      cy.get('input[name="address"]')
        .click({force: true})
        .type('receiver@test.com')
        .should('have.value', 'receiver@test.com')
      cy.get('input[name="description"]')
        .click({force: true})
        .type('Description of Email')
        .should('have.value', 'Description of Email')
      cy.get(':nth-child(1) > .genLYU > .sc-bsipQr > .sc-dtwoBo > .ant-checkbox-wrapper > .ant-checkbox > .ant-checkbox-input')
        .click()
      cy.get('[attr-name="EmailsCreateFormButtons"]')
        .contains('Add')
        .click()
        .wait(5000)
      // Syslog configuration for attacks
      cy.get('[href="/profile/alsid/management/system/configuration/syslogs"]')
      .contains('SYSLOG')
      .click()
      .wait(1000)
      cy.get('.ant-btn')
        .click()
        .wait(5000)
      cy.get('input[name="ip"]')
        .click({force: true})
        .type('192.168.100.4')
        .should('have.value', '192.168.100.4')
      cy.get('input[name="port"]')
        .click({force: true})
        .type('30338')
        .should('have.value', '30338')
      cy.get(':nth-child(3) > .kMNvtM > .sc-dtwoBo > .controlContainer > .sc-gIRixj > .ant-select > .ant-select-selector > .ant-select-selection-item')
        .click({force: true})
        .wait(5000)
      cy.get('.ant-select-item-option-content')
        .contains('TCP')
        .click()
      cy.get('input[name="tls"]')
        .click()
      cy.get('input[name="description"]')
        .click({force: true})
        .type('Description of Syslog')
        .should('have.value', 'Description of Syslog')
      cy.get(':nth-child(2) > .kMNvtM > .sc-dtwoBo > .controlContainer > .sc-gIRixj > .ant-select > .ant-select-selector')
        .click({force: true})
        .wait(5000)
      cy.get('.ant-select-item-option-content')
        .contains('On each attack')
        .click({force: true})
        .wait(5000)
      cy.get(':nth-child(1) > .genLYU > .sc-bsipQr > .sc-dtwoBo > .ant-checkbox-wrapper > .ant-checkbox > .ant-checkbox-input')
        .click()
      cy.get(':nth-child(3) > .genLYU > .sc-bsipQr > .sc-dtwoBo > .ant-checkbox-wrapper > .ant-checkbox > .ant-checkbox-input')
        .click()
      cy.get('[attr-name="ContainerFooter"]')
        .contains('Add')
        .click()
        .wait(5000)
      // LDAP configuration
      cy.get('[href="/profile/alsid/management/system/configuration/ldap-configuration"]')
        .contains('LDAP')
        .click()
        .wait(5000)
      cy.get('.ant-switch')
        .click()
      cy.get('input[name="url"]')
        .click({force: true})
        .type('ldap://10.200.200.4:389')
        .should('have.value', 'ldap://10.200.200.4:389')
      cy.get('input[name="searchUserDN"]')
        .click({force: true})
        .type('test')
        .should('have.value', 'test')
      cy.get('input[name="searchUserPassword"]')
        .click({force: true})
        .type('A1sidForAd')
        .should('have.value', 'A1sidForAd')
      cy.get('input[name="userSearchBase"]')
        .click({force: true})
        .type('DC=alsid,DC=corp')
        .should('have.value', 'DC=alsid,DC=corp')
      cy.get('input[name="userSearchFilter"]')
        .click({force: true})
        .type('(sAMAccountname={{login}})',{ parseSpecialCharSequences: false })
        .should('have.value', '(sAMAccountname={{login}})')
      cy.get('.controlContainer > .sc-dtwoBo > .ant-btn')
        .click()
      cy.get('input[name="groupName"]')
        .click({force: true})
        .type('GS_Alsid_Admin')
        .should('have.value', 'GS_Alsid_Admin')
      cy.get(':nth-child(2) > .kMNvtM > .sc-dtwoBo > .controlContainer > .sc-gIRixj > .ant-select > .ant-select-selector')  
        .click({force: true})
        .wait(1000)
      cy.get('.ant-select-item-option-content')
        .contains('Alsid')
        .click({force: true})
        .wait(1000)
      cy.get(':nth-child(3) > .kMNvtM > .sc-dtwoBo > .controlContainer > .sc-gIRixj > .ant-select > .ant-select-selector')
        .click({force: true})
        .wait(1000)
      cy.get('.ant-select-item-option-content')
        .contains('Global Administrator')
        .click({force: true})
        .wait(1000)
      cy.get('input[name="userSearchFilter"]')
        .click({force: true})
      cy.get('[attr-name="ContainerFooter"]')
        .contains('Save')
        .click()
    })
  })


})
